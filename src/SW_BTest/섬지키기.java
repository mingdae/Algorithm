package SW_BTest;

/*
 * [문제 분석]
 * - N*N, 각 지역의 고도
 * - 해수면 m -> 고도 m-1 이하의 지역은 침투 가능
 * - 상하좌우 4방 침투
 * - 바닷물과 접촉한 지역만 침투 가능
 * 
 * <섬 지키기>
 * - 1*M 크기 구조물, 높이
 * - 섬에 설치 가능, 딱 맞게 설치해야함
 * - 해당 구조물 부분만큼 높이 올라감, 설치 이후 M개 지역 고도 모두 일치해야함
 * - 구조물 시계방향 90도, 180도, 270도 회전 가능
 * 
 * <변수>
 * - N (5~20)
 * - mMap(1~5)
 * - M(1~5)
 * - mStructure(1~5)
 * - mSeaLevel(1~10) 
 * 
 * <API>
 * 1. void init(N, mMap[][])
 * 2. int numberOfCandidate(int M, int mStructure[])  -> 150,000번 호출
 * 		- 구조물 mStructure 을 1개 설치했을 때, 나타날 수 있는 경우의 수 반환
 * 		- 설치 지역이 1개라도 다르면 다른 경우로 취급
 * 		- 구조물을 설치 할 수 있는 경우의 수 반환
 * 		- M이 1일때는 N*N 반환
 * 
 * 3. int maxArea(int M, int mStructure[], int mSeaLevel) -> 50번 호출
 * 		- 해수면이 mSeaLevel 만큼 상승해도 바다에 잠기지 않은 지역 개수 최대가 되도록 구조물 설치,
 * 		- 남아있는 섬의 개수 반환
 * 		- 설치할 방법 없으면 -1 반환
 * 		- 실제로 설치 X 
 * 		- 최대 지역 개수 반환
 * 
 * 
 * 
 */
public class 섬지키기 {

}
